/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RegistryInterface extends ethers.utils.Interface {
  functions: {
    "addPolicy(address)": FunctionFragment;
    "addProduct(address)": FunctionFragment;
    "addStrategy(address)": FunctionFragment;
    "getPolicy(uint256)": FunctionFragment;
    "getProduct(uint256)": FunctionFragment;
    "getStrategy(uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "isPolicy(address)": FunctionFragment;
    "isProduct(address)": FunctionFragment;
    "isStrategy(address)": FunctionFragment;
    "locker()": FunctionFragment;
    "master()": FunctionFragment;
    "numPolicies()": FunctionFragment;
    "numProducts()": FunctionFragment;
    "numStrategies()": FunctionFragment;
    "productFactory()": FunctionFragment;
    "removePolicy(address)": FunctionFragment;
    "removeProduct(address)": FunctionFragment;
    "removeStrategy(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setLocker(address)": FunctionFragment;
    "setMaster(address)": FunctionFragment;
    "setProductFactory(address)": FunctionFragment;
    "setSolace(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "solace()": FunctionFragment;
    "treasury()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addPolicy", values: [string]): string;
  encodeFunctionData(functionFragment: "addProduct", values: [string]): string;
  encodeFunctionData(functionFragment: "addStrategy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPolicy", values: [string]): string;
  encodeFunctionData(functionFragment: "isProduct", values: [string]): string;
  encodeFunctionData(functionFragment: "isStrategy", values: [string]): string;
  encodeFunctionData(functionFragment: "locker", values?: undefined): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numPolicies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePolicy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProduct",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setLocker", values: [string]): string;
  encodeFunctionData(functionFragment: "setMaster", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProductFactory",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setSolace", values: [string]): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(functionFragment: "setVault", values: [string]): string;
  encodeFunctionData(functionFragment: "solace", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStrategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMaster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProductFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSolace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "solace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export class Registry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RegistryInterface;

  functions: {
    addPolicy(
      _policy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPolicy(address)"(
      _policy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addProduct(
      _product: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addProduct(address)"(
      _product: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPolicy(
      _policyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getPolicy(uint256)"(
      _policyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getProduct(
      _productNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getProduct(uint256)"(
      _productNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getStrategy(
      _strategyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getStrategy(uint256)"(
      _strategyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    governance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isPolicy(
      _policy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isPolicy(address)"(
      _policy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isProduct(
      _product: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isProduct(address)"(
      _product: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    locker(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "locker()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    master(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "master()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    numPolicies(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numPolicies()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numProducts(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numProducts()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numStrategies(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numStrategies()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    productFactory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "productFactory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    removePolicy(
      _policy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removePolicy(address)"(
      _policy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeProduct(
      _product: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeProduct(address)"(
      _product: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLocker(
      _locker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLocker(address)"(
      _locker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaster(
      _master: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaster(address)"(
      _master: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProductFactory(
      _productFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProductFactory(address)"(
      _productFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSolace(
      _solace: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSolace(address)"(
      _solace: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVault(
      _vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVault(address)"(
      _vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    solace(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "solace()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    treasury(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "treasury()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "vault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  addPolicy(
    _policy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPolicy(address)"(
    _policy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addProduct(
    _product: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addProduct(address)"(
    _product: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addStrategy(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addStrategy(address)"(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPolicy(
    _policyNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPolicy(uint256)"(
    _policyNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProduct(
    _productNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getProduct(uint256)"(
    _productNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getStrategy(
    _strategyNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getStrategy(uint256)"(
    _strategyNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  isPolicy(_policy: string, overrides?: CallOverrides): Promise<boolean>;

  "isPolicy(address)"(
    _policy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProduct(_product: string, overrides?: CallOverrides): Promise<boolean>;

  "isProduct(address)"(
    _product: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isStrategy(_strategy: string, overrides?: CallOverrides): Promise<boolean>;

  "isStrategy(address)"(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  locker(overrides?: CallOverrides): Promise<string>;

  "locker()"(overrides?: CallOverrides): Promise<string>;

  master(overrides?: CallOverrides): Promise<string>;

  "master()"(overrides?: CallOverrides): Promise<string>;

  numPolicies(overrides?: CallOverrides): Promise<BigNumber>;

  "numPolicies()"(overrides?: CallOverrides): Promise<BigNumber>;

  numProducts(overrides?: CallOverrides): Promise<BigNumber>;

  "numProducts()"(overrides?: CallOverrides): Promise<BigNumber>;

  numStrategies(overrides?: CallOverrides): Promise<BigNumber>;

  "numStrategies()"(overrides?: CallOverrides): Promise<BigNumber>;

  productFactory(overrides?: CallOverrides): Promise<string>;

  "productFactory()"(overrides?: CallOverrides): Promise<string>;

  removePolicy(
    _policy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removePolicy(address)"(
    _policy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeProduct(
    _product: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeProduct(address)"(
    _product: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeStrategy(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeStrategy(address)"(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLocker(
    _locker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLocker(address)"(
    _locker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaster(
    _master: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaster(address)"(
    _master: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProductFactory(
    _productFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProductFactory(address)"(
    _productFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSolace(
    _solace: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSolace(address)"(
    _solace: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTreasury(address)"(
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVault(_vault: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setVault(address)"(
    _vault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  solace(overrides?: CallOverrides): Promise<string>;

  "solace()"(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addPolicy(_policy: string, overrides?: CallOverrides): Promise<void>;

    "addPolicy(address)"(
      _policy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addProduct(_product: string, overrides?: CallOverrides): Promise<void>;

    "addProduct(address)"(
      _product: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    "addStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPolicy(
      _policyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPolicy(uint256)"(
      _policyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProduct(
      _productNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getProduct(uint256)"(
      _productNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getStrategy(
      _strategyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getStrategy(uint256)"(
      _strategyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    isPolicy(_policy: string, overrides?: CallOverrides): Promise<boolean>;

    "isPolicy(address)"(
      _policy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProduct(_product: string, overrides?: CallOverrides): Promise<boolean>;

    "isProduct(address)"(
      _product: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isStrategy(_strategy: string, overrides?: CallOverrides): Promise<boolean>;

    "isStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    locker(overrides?: CallOverrides): Promise<string>;

    "locker()"(overrides?: CallOverrides): Promise<string>;

    master(overrides?: CallOverrides): Promise<string>;

    "master()"(overrides?: CallOverrides): Promise<string>;

    numPolicies(overrides?: CallOverrides): Promise<BigNumber>;

    "numPolicies()"(overrides?: CallOverrides): Promise<BigNumber>;

    numProducts(overrides?: CallOverrides): Promise<BigNumber>;

    "numProducts()"(overrides?: CallOverrides): Promise<BigNumber>;

    numStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    "numStrategies()"(overrides?: CallOverrides): Promise<BigNumber>;

    productFactory(overrides?: CallOverrides): Promise<string>;

    "productFactory()"(overrides?: CallOverrides): Promise<string>;

    removePolicy(_policy: string, overrides?: CallOverrides): Promise<void>;

    "removePolicy(address)"(
      _policy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProduct(_product: string, overrides?: CallOverrides): Promise<void>;

    "removeProduct(address)"(
      _product: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    "removeStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLocker(_locker: string, overrides?: CallOverrides): Promise<void>;

    "setLocker(address)"(
      _locker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaster(_master: string, overrides?: CallOverrides): Promise<void>;

    "setMaster(address)"(
      _master: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProductFactory(
      _productFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProductFactory(address)"(
      _productFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolace(_solace: string, overrides?: CallOverrides): Promise<void>;

    "setSolace(address)"(
      _solace: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVault(_vault: string, overrides?: CallOverrides): Promise<void>;

    "setVault(address)"(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    solace(overrides?: CallOverrides): Promise<string>;

    "solace()"(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addPolicy(_policy: string, overrides?: Overrides): Promise<BigNumber>;

    "addPolicy(address)"(
      _policy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addProduct(_product: string, overrides?: Overrides): Promise<BigNumber>;

    "addProduct(address)"(
      _product: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addStrategy(_strategy: string, overrides?: Overrides): Promise<BigNumber>;

    "addStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPolicy(
      _policyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPolicy(uint256)"(
      _policyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProduct(
      _productNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProduct(uint256)"(
      _productNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategy(
      _strategyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStrategy(uint256)"(
      _strategyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPolicy(_policy: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPolicy(address)"(
      _policy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProduct(_product: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isProduct(address)"(
      _product: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locker(overrides?: CallOverrides): Promise<BigNumber>;

    "locker()"(overrides?: CallOverrides): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    "master()"(overrides?: CallOverrides): Promise<BigNumber>;

    numPolicies(overrides?: CallOverrides): Promise<BigNumber>;

    "numPolicies()"(overrides?: CallOverrides): Promise<BigNumber>;

    numProducts(overrides?: CallOverrides): Promise<BigNumber>;

    "numProducts()"(overrides?: CallOverrides): Promise<BigNumber>;

    numStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    "numStrategies()"(overrides?: CallOverrides): Promise<BigNumber>;

    productFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "productFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    removePolicy(_policy: string, overrides?: Overrides): Promise<BigNumber>;

    "removePolicy(address)"(
      _policy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeProduct(_product: string, overrides?: Overrides): Promise<BigNumber>;

    "removeProduct(address)"(
      _product: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLocker(_locker: string, overrides?: Overrides): Promise<BigNumber>;

    "setLocker(address)"(
      _locker: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaster(_master: string, overrides?: Overrides): Promise<BigNumber>;

    "setMaster(address)"(
      _master: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProductFactory(
      _productFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProductFactory(address)"(
      _productFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSolace(_solace: string, overrides?: Overrides): Promise<BigNumber>;

    "setSolace(address)"(
      _solace: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTreasury(_treasury: string, overrides?: Overrides): Promise<BigNumber>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVault(_vault: string, overrides?: Overrides): Promise<BigNumber>;

    "setVault(address)"(
      _vault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    solace(overrides?: CallOverrides): Promise<BigNumber>;

    "solace()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addPolicy(
      _policy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPolicy(address)"(
      _policy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addProduct(
      _product: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addProduct(address)"(
      _product: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPolicy(
      _policyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPolicy(uint256)"(
      _policyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProduct(
      _productNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProduct(uint256)"(
      _productNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategy(
      _strategyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStrategy(uint256)"(
      _strategyNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPolicy(
      _policy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPolicy(address)"(
      _policy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProduct(
      _product: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isProduct(address)"(
      _product: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStrategy(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "locker()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "master()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numPolicies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numPolicies()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numProducts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numProducts()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numStrategies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numStrategies()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    productFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "productFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePolicy(
      _policy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removePolicy(address)"(
      _policy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeProduct(
      _product: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeProduct(address)"(
      _product: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLocker(
      _locker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLocker(address)"(
      _locker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaster(
      _master: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaster(address)"(
      _master: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProductFactory(
      _productFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProductFactory(address)"(
      _productFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSolace(
      _solace: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSolace(address)"(
      _solace: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVault(
      _vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVault(address)"(
      _vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    solace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solace()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
