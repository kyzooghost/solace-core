/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockVault } from "./MockVault";

export class MockVaultFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_registry: string, overrides?: Overrides): Promise<MockVault> {
    return super.deploy(_registry, overrides || {}) as Promise<MockVault>;
  }
  getDeployTransaction(
    _registry: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  attach(address: string): MockVault {
    return super.attach(address) as MockVault;
  }
  connect(signer: Signer): MockVaultFactory {
    return super.connect(signer) as MockVaultFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVault {
    return new Contract(address, _abi, signerOrProvider) as MockVault;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    name: "StrategyCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    name: "StrategyDeleted",
    type: "event",
  },
  {
    inputs: [],
    name: "createStrategy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_strategy",
        type: "address",
      },
    ],
    name: "deleteStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract Registry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105473803806105478339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6104398061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806326d9108a1461004657806353e6b797146100625780637b10399914610080575b600080fd5b610060600480360381019061005b9190610297565b61009e565b005b61006a610163565b6040516100779190610338565b60405180910390f35b61008861025e565b6040516100959190610353565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663175188e8826040518263ffffffff1660e01b81526004016100f79190610338565b600060405180830381600087803b15801561011157600080fd5b505af1158015610125573d6000803e3d6000fd5b505050507f1f66fa7f1913b878e9ada226201f3d22489160a3100db26dc5f222d11e6614e9816040516101589190610338565b60405180910390a150565b60008042434060405160200161017a92919061030c565b6040516020818303038152906040528051906020012060001c905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663223e5479826040518263ffffffff1660e01b81526004016101ee9190610338565b600060405180830381600087803b15801561020857600080fd5b505af115801561021c573d6000803e3d6000fd5b505050507fbe69a8909bf54ab6b33b6090045cf72cb4832fe592c189d7cb21504b38ec2d158160405161024f9190610338565b60405180910390a18091505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081359050610291816103ec565b92915050565b6000602082840312156102a957600080fd5b60006102b784828501610282565b91505092915050565b6102c98161036e565b82525050565b6102e06102db82610380565b6103d8565b82525050565b6102ef816103b4565b82525050565b610306610301826103aa565b6103e2565b82525050565b600061031882856102f5565b60208201915061032882846102cf565b6020820191508190509392505050565b600060208201905061034d60008301846102c0565b92915050565b600060208201905061036860008301846102e6565b92915050565b60006103798261038a565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103bf826103c6565b9050919050565b60006103d18261038a565b9050919050565b6000819050919050565b6000819050919050565b6103f58161036e565b811461040057600080fd5b5056fea2646970667358221220b27080772f3d633b0d0a7db82e1a6065a0fbc98da57ecfdea70d7f4d69d9fc7364736f6c63430008000033";
