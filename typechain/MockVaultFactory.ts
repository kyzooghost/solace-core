/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockVault } from "./MockVault";

export class MockVaultFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_registry: string, overrides?: Overrides): Promise<MockVault> {
    return super.deploy(_registry, overrides || {}) as Promise<MockVault>;
  }
  getDeployTransaction(
    _registry: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  attach(address: string): MockVault {
    return super.attach(address) as MockVault;
  }
  connect(signer: Signer): MockVaultFactory {
    return super.connect(signer) as MockVaultFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVault {
    return new Contract(address, _abi, signerOrProvider) as MockVault;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    name: "StrategyCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    name: "StrategyDeleted",
    type: "event",
  },
  {
    inputs: [],
    name: "createStrategy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_strategy",
        type: "address",
      },
    ],
    name: "deleteStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract Registry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161030f38038061030f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b61027e806100916000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806326d9108a1461004657806353e6b7971461005b5780637b10399914610079575b600080fd5b6100596100543660046101f8565b610081565b005b61006361011d565b6040516100709190610234565b60405180910390f35b6100636101e9565b6000546040516302ea311d60e31b81526001600160a01b039091169063175188e8906100b1908490600401610234565b600060405180830381600087803b1580156100cb57600080fd5b505af11580156100df573d6000803e3d6000fd5b505050507f1f66fa7f1913b878e9ada226201f3d22489160a3100db26dc5f222d11e6614e9816040516101129190610234565b60405180910390a150565b600080424340604051602001610134929190610226565b60408051601f1981840301815290829052805160209091012060005463223e547960e01b83529092506001600160a01b03169063223e54799061017b908490600401610234565b600060405180830381600087803b15801561019557600080fd5b505af11580156101a9573d6000803e3d6000fd5b505050507fbe69a8909bf54ab6b33b6090045cf72cb4832fe592c189d7cb21504b38ec2d15816040516101dc9190610234565b60405180910390a1905090565b6000546001600160a01b031681565b600060208284031215610209578081fd5b81356001600160a01b038116811461021f578182fd5b9392505050565b918252602082015260400190565b6001600160a01b039190911681526020019056fea26469706673582212200096a5fc2d922e106ef784284ed24d3228ac160f154e8cd5a48552675830ad9364736f6c63430008000033";
