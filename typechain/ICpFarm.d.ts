/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICpFarmInterface extends ethers.utils.Interface {
  functions: {
    "accRewardPerShare()": FunctionFragment;
    "acceptGovernance()": FunctionFragment;
    "blockReward()": FunctionFragment;
    "compoundRewards()": FunctionFragment;
    "depositCp(uint256)": FunctionFragment;
    "depositCpSigned(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "depositEth()": FunctionFragment;
    "endBlock()": FunctionFragment;
    "farmType()": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "lastRewardBlock()": FunctionFragment;
    "master()": FunctionFragment;
    "newGovernance()": FunctionFragment;
    "pendingRewards(address)": FunctionFragment;
    "setEnd(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setRewards(uint256)": FunctionFragment;
    "solace()": FunctionFragment;
    "startBlock()": FunctionFragment;
    "updateFarm()": FunctionFragment;
    "valueStaked()": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawCp(uint256)": FunctionFragment;
    "withdrawEth(uint256,uint256)": FunctionFragment;
    "withdrawRewards()": FunctionFragment;
    "withdrawRewardsForUser(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accRewardPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compoundRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositCp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCpSigned",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "farmType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "solace", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFarm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valueStaked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardsForUser",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accRewardPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositCp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCpSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "solace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valueStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawCp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardsForUser",
    data: BytesLike
  ): Result;

  events: {
    "CpDeposited(address,uint256)": EventFragment;
    "CpWithdrawn(address,uint256)": EventFragment;
    "EthDeposited(address,uint256)": EventFragment;
    "EthWithdrawn(address,uint256)": EventFragment;
    "FarmEndSet(uint256)": EventFragment;
    "GovernanceTransferred(address)": EventFragment;
    "RewardsCompounded(address)": EventFragment;
    "RewardsSet(uint256)": EventFragment;
    "UserRewarded(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CpDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CpWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmEndSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsCompounded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRewarded"): EventFragment;
}

export class ICpFarm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICpFarmInterface;

  functions: {
    accRewardPerShare(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accRewardPerShare()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    acceptGovernance(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptGovernance()"(overrides?: Overrides): Promise<ContractTransaction>;

    blockReward(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "blockReward()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    compoundRewards(overrides?: Overrides): Promise<ContractTransaction>;

    "compoundRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

    depositCp(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositCp(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositCpSigned(
      _depositor: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositCpSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
      _depositor: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositEth(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "depositEth()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    endBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "endBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    farmType(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "farmType()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    governance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    lastRewardBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastRewardBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    master(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "master()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    newGovernance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "newGovernance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pendingRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setEnd(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEnd(uint256)"(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewards(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewards(uint256)"(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    solace(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "solace()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    startBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "startBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    updateFarm(overrides?: Overrides): Promise<ContractTransaction>;

    "updateFarm()"(overrides?: Overrides): Promise<ContractTransaction>;

    valueStaked(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "valueStaked()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    vault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "vault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawCp(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawCp(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawEth(
      _amount: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawEth(uint256,uint256)"(
      _amount: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawRewards(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawRewardsForUser(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawRewardsForUser(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  "accRewardPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  acceptGovernance(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptGovernance()"(overrides?: Overrides): Promise<ContractTransaction>;

  blockReward(overrides?: CallOverrides): Promise<BigNumber>;

  "blockReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  compoundRewards(overrides?: Overrides): Promise<ContractTransaction>;

  "compoundRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  depositCp(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositCp(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositCpSigned(
    _depositor: string,
    _amount: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositCpSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
    _depositor: string,
    _amount: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositEth(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "depositEth()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  farmType(overrides?: CallOverrides): Promise<BigNumber>;

  "farmType()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  master(overrides?: CallOverrides): Promise<string>;

  "master()"(overrides?: CallOverrides): Promise<string>;

  newGovernance(overrides?: CallOverrides): Promise<string>;

  "newGovernance()"(overrides?: CallOverrides): Promise<string>;

  pendingRewards(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pendingRewards(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setEnd(
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEnd(uint256)"(
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewards(
    _blockReward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewards(uint256)"(
    _blockReward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  solace(overrides?: CallOverrides): Promise<string>;

  "solace()"(overrides?: CallOverrides): Promise<string>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateFarm(overrides?: Overrides): Promise<ContractTransaction>;

  "updateFarm()"(overrides?: Overrides): Promise<ContractTransaction>;

  valueStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "valueStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  withdrawCp(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawCp(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawEth(
    _amount: BigNumberish,
    _maxLoss: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawEth(uint256,uint256)"(
    _amount: BigNumberish,
    _maxLoss: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawRewards(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawRewardsForUser(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawRewardsForUser(address)"(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accRewardPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    "acceptGovernance()"(overrides?: CallOverrides): Promise<void>;

    blockReward(overrides?: CallOverrides): Promise<BigNumber>;

    "blockReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    compoundRewards(overrides?: CallOverrides): Promise<void>;

    "compoundRewards()"(overrides?: CallOverrides): Promise<void>;

    depositCp(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "depositCp(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCpSigned(
      _depositor: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositCpSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
      _depositor: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEth(overrides?: CallOverrides): Promise<void>;

    "depositEth()"(overrides?: CallOverrides): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmType(overrides?: CallOverrides): Promise<BigNumber>;

    "farmType()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<string>;

    "master()"(overrides?: CallOverrides): Promise<string>;

    newGovernance(overrides?: CallOverrides): Promise<string>;

    "newGovernance()"(overrides?: CallOverrides): Promise<string>;

    pendingRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEnd(_endBlock: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setEnd(uint256)"(
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(
      _blockReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewards(uint256)"(
      _blockReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    solace(overrides?: CallOverrides): Promise<string>;

    "solace()"(overrides?: CallOverrides): Promise<string>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateFarm(overrides?: CallOverrides): Promise<void>;

    "updateFarm()"(overrides?: CallOverrides): Promise<void>;

    valueStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "valueStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    withdrawCp(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawCp(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEth(
      _amount: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawEth(uint256,uint256)"(
      _amount: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRewards(overrides?: CallOverrides): Promise<void>;

    "withdrawRewards()"(overrides?: CallOverrides): Promise<void>;

    withdrawRewardsForUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawRewardsForUser(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CpDeposited(_user: string | null, _amount: null): EventFilter;

    CpWithdrawn(_user: string | null, _amount: null): EventFilter;

    EthDeposited(_user: string | null, _amount: null): EventFilter;

    EthWithdrawn(_user: string | null, _amount: null): EventFilter;

    FarmEndSet(_endBlock: null): EventFilter;

    GovernanceTransferred(_newGovernance: null): EventFilter;

    RewardsCompounded(_user: string | null): EventFilter;

    RewardsSet(_blockReward: null): EventFilter;

    UserRewarded(_user: string | null, _amount: null): EventFilter;
  };

  estimateGas: {
    accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accRewardPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(overrides?: Overrides): Promise<BigNumber>;

    "acceptGovernance()"(overrides?: Overrides): Promise<BigNumber>;

    blockReward(overrides?: CallOverrides): Promise<BigNumber>;

    "blockReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    compoundRewards(overrides?: Overrides): Promise<BigNumber>;

    "compoundRewards()"(overrides?: Overrides): Promise<BigNumber>;

    depositCp(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "depositCp(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositCpSigned(
      _depositor: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositCpSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
      _depositor: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositEth(overrides?: PayableOverrides): Promise<BigNumber>;

    "depositEth()"(overrides?: PayableOverrides): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmType(overrides?: CallOverrides): Promise<BigNumber>;

    "farmType()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    "master()"(overrides?: CallOverrides): Promise<BigNumber>;

    newGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    "newGovernance()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEnd(_endBlock: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setEnd(uint256)"(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewards(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewards(uint256)"(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    solace(overrides?: CallOverrides): Promise<BigNumber>;

    "solace()"(overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateFarm(overrides?: Overrides): Promise<BigNumber>;

    "updateFarm()"(overrides?: Overrides): Promise<BigNumber>;

    valueStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "valueStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCp(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawCp(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawEth(
      _amount: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawEth(uint256,uint256)"(
      _amount: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawRewards(overrides?: Overrides): Promise<BigNumber>;

    "withdrawRewards()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawRewardsForUser(
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawRewardsForUser(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accRewardPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accRewardPerShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptGovernance(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptGovernance()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    blockReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blockReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compoundRewards(overrides?: Overrides): Promise<PopulatedTransaction>;

    "compoundRewards()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    depositCp(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositCp(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositCpSigned(
      _depositor: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositCpSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
      _depositor: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositEth(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "depositEth()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastRewardBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "master()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newGovernance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEnd(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEnd(uint256)"(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewards(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewards(uint256)"(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    solace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solace()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateFarm(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateFarm()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    valueStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "valueStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCp(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawCp(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawEth(
      _amount: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawEth(uint256,uint256)"(
      _amount: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawRewards(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawRewards()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawRewardsForUser(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawRewardsForUser(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
