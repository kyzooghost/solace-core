/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterInterface extends ethers.utils.Interface {
  functions: {
    "createFarm(address,uint256,uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "farmInfo(uint256)": FunctionFragment;
    "farmLength()": FunctionFragment;
    "getMultiplier(uint256,uint256,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "massUpdateFarms()": FunctionFragment;
    "pendingReward(uint256,address)": FunctionFragment;
    "setFarmParams(uint256,uint256,uint256,bool)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setSolacePerBlock(uint256,bool)": FunctionFragment;
    "solace()": FunctionFragment;
    "solacePerBlock()": FunctionFragment;
    "totalAllocPoints()": FunctionFragment;
    "updateFarm(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createFarm",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdateFarms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFarmParams",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolacePerBlock",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "solace", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "solacePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFarm",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdateFarms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFarmParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSolacePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "solacePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "FarmCreated(uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Master extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterInterface;

  functions: {
    createFarm(
      _token: string,
      _allocPoints: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createFarm(address,uint256,uint256,uint256)"(
      _token: string,
      _allocPoints: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    farmInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      allocPoints: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      lastRewardBlock: BigNumber;
      accSolacePerShare: BigNumber;
      tokensStaked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    "farmInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      allocPoints: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      lastRewardBlock: BigNumber;
      accSolacePerShare: BigNumber;
      tokensStaked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    farmLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "farmLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMultiplier(
      _farmId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMultiplier(uint256,uint256,uint256)"(
      _farmId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    governance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    massUpdateFarms(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdateFarms()"(overrides?: Overrides): Promise<ContractTransaction>;

    pendingReward(
      _farmId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingReward(uint256,address)"(
      _farmId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setFarmParams(
      _farmId: BigNumberish,
      _allocPoints: BigNumberish,
      _endBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFarmParams(uint256,uint256,uint256,bool)"(
      _farmId: BigNumberish,
      _allocPoints: BigNumberish,
      _endBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSolacePerBlock(
      _solacePerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSolacePerBlock(uint256,bool)"(
      _solacePerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    solace(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "solace()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    solacePerBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "solacePerBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalAllocPoints(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalAllocPoints()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    updateFarm(
      _farmId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFarm(uint256)"(
      _farmId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    withdraw(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  createFarm(
    _token: string,
    _allocPoints: BigNumberish,
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createFarm(address,uint256,uint256,uint256)"(
    _token: string,
    _allocPoints: BigNumberish,
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _farmId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _farmId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  farmInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    token: string;
    allocPoints: BigNumber;
    startBlock: BigNumber;
    endBlock: BigNumber;
    lastRewardBlock: BigNumber;
    accSolacePerShare: BigNumber;
    tokensStaked: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  "farmInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    token: string;
    allocPoints: BigNumber;
    startBlock: BigNumber;
    endBlock: BigNumber;
    lastRewardBlock: BigNumber;
    accSolacePerShare: BigNumber;
    tokensStaked: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  farmLength(overrides?: CallOverrides): Promise<BigNumber>;

  "farmLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMultiplier(
    _farmId: BigNumberish,
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256,uint256)"(
    _farmId: BigNumberish,
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  massUpdateFarms(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdateFarms()"(overrides?: Overrides): Promise<ContractTransaction>;

  pendingReward(
    _farmId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingReward(uint256,address)"(
    _farmId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFarmParams(
    _farmId: BigNumberish,
    _allocPoints: BigNumberish,
    _endBlock: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFarmParams(uint256,uint256,uint256,bool)"(
    _farmId: BigNumberish,
    _allocPoints: BigNumberish,
    _endBlock: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSolacePerBlock(
    _solacePerBlock: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSolacePerBlock(uint256,bool)"(
    _solacePerBlock: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  solace(overrides?: CallOverrides): Promise<string>;

  "solace()"(overrides?: CallOverrides): Promise<string>;

  solacePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "solacePerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoints(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoints()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateFarm(
    _farmId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFarm(uint256)"(
    _farmId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    rewardDebt: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    rewardDebt: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  withdraw(
    _farmId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _farmId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    createFarm(
      _token: string,
      _allocPoints: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createFarm(address,uint256,uint256,uint256)"(
      _token: string,
      _allocPoints: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    farmInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      allocPoints: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      lastRewardBlock: BigNumber;
      accSolacePerShare: BigNumber;
      tokensStaked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    "farmInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      allocPoints: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      lastRewardBlock: BigNumber;
      accSolacePerShare: BigNumber;
      tokensStaked: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    farmLength(overrides?: CallOverrides): Promise<BigNumber>;

    "farmLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _farmId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256,uint256)"(
      _farmId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    massUpdateFarms(overrides?: CallOverrides): Promise<void>;

    "massUpdateFarms()"(overrides?: CallOverrides): Promise<void>;

    pendingReward(
      _farmId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _farmId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFarmParams(
      _farmId: BigNumberish,
      _allocPoints: BigNumberish,
      _endBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFarmParams(uint256,uint256,uint256,bool)"(
      _farmId: BigNumberish,
      _allocPoints: BigNumberish,
      _endBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolacePerBlock(
      _solacePerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSolacePerBlock(uint256,bool)"(
      _solacePerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    solace(overrides?: CallOverrides): Promise<string>;

    "solace()"(overrides?: CallOverrides): Promise<string>;

    solacePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "solacePerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoints(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoints()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateFarm(_farmId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updateFarm(uint256)"(
      _farmId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    withdraw(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user: string | null,
      farmId: BigNumberish | null,
      amount: null
    ): EventFilter;

    FarmCreated(farmId: BigNumberish | null): EventFilter;

    Withdraw(
      user: string | null,
      farmId: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    createFarm(
      _token: string,
      _allocPoints: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createFarm(address,uint256,uint256,uint256)"(
      _token: string,
      _allocPoints: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    farmInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "farmInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmLength(overrides?: CallOverrides): Promise<BigNumber>;

    "farmLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _farmId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256,uint256)"(
      _farmId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdateFarms(overrides?: Overrides): Promise<BigNumber>;

    "massUpdateFarms()"(overrides?: Overrides): Promise<BigNumber>;

    pendingReward(
      _farmId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _farmId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFarmParams(
      _farmId: BigNumberish,
      _allocPoints: BigNumberish,
      _endBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFarmParams(uint256,uint256,uint256,bool)"(
      _farmId: BigNumberish,
      _allocPoints: BigNumberish,
      _endBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSolacePerBlock(
      _solacePerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSolacePerBlock(uint256,bool)"(
      _solacePerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    solace(overrides?: CallOverrides): Promise<BigNumber>;

    "solace()"(overrides?: CallOverrides): Promise<BigNumber>;

    solacePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "solacePerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoints(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoints()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateFarm(
      _farmId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateFarm(uint256)"(
      _farmId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createFarm(
      _token: string,
      _allocPoints: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createFarm(address,uint256,uint256,uint256)"(
      _token: string,
      _allocPoints: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    farmInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "farmInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      _farmId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256,uint256)"(
      _farmId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdateFarms(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdateFarms()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    pendingReward(
      _farmId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingReward(uint256,address)"(
      _farmId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFarmParams(
      _farmId: BigNumberish,
      _allocPoints: BigNumberish,
      _endBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFarmParams(uint256,uint256,uint256,bool)"(
      _farmId: BigNumberish,
      _allocPoints: BigNumberish,
      _endBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSolacePerBlock(
      _solacePerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSolacePerBlock(uint256,bool)"(
      _solacePerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    solace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solace()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    solacePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solacePerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoints()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateFarm(
      _farmId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFarm(uint256)"(
      _farmId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _farmId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
