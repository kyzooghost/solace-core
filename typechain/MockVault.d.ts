/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockVaultInterface extends ethers.utils.Interface {
  functions: {
    "createStrategy()": FunctionFragment;
    "deleteStrategy(address)": FunctionFragment;
    "registry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStrategy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;

  events: {
    "StrategyCreated(address)": EventFragment;
    "StrategyDeleted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StrategyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyDeleted"): EventFragment;
}

export class MockVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockVaultInterface;

  functions: {
    createStrategy(overrides?: Overrides): Promise<ContractTransaction>;

    "createStrategy()"(overrides?: Overrides): Promise<ContractTransaction>;

    deleteStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "registry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  createStrategy(overrides?: Overrides): Promise<ContractTransaction>;

  "createStrategy()"(overrides?: Overrides): Promise<ContractTransaction>;

  deleteStrategy(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteStrategy(address)"(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createStrategy(overrides?: CallOverrides): Promise<string>;

    "createStrategy()"(overrides?: CallOverrides): Promise<string>;

    deleteStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    "deleteStrategy(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    StrategyCreated(strategy: null): EventFilter;

    StrategyDeleted(strategy: null): EventFilter;
  };

  estimateGas: {
    createStrategy(overrides?: Overrides): Promise<BigNumber>;

    "createStrategy()"(overrides?: Overrides): Promise<BigNumber>;

    deleteStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createStrategy(overrides?: Overrides): Promise<PopulatedTransaction>;

    "createStrategy()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deleteStrategy(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteStrategy(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
