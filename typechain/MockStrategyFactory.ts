/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockStrategy } from "./MockStrategy";

export class MockStrategyFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_vault: string, overrides?: Overrides): Promise<MockStrategy> {
    return super.deploy(_vault, overrides || {}) as Promise<MockStrategy>;
  }
  getDeployTransaction(
    _vault: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_vault, overrides || {});
  }
  attach(address: string): MockStrategy {
    return super.attach(address) as MockStrategy;
  }
  connect(signer: Signer): MockStrategyFactory {
    return super.connect(signer) as MockStrategyFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStrategy {
    return new Contract(address, _abi, signerOrProvider) as MockStrategy;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "estimatedTotalAssets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protectedToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
    ],
    name: "setGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
    ],
    name: "setVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "want",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountNeeded",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "_loss",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b89380380610b8983398101604081905261002f916100f9565b600080546001600160a01b03199081163317909155600180546001600160a01b0380851691909316179081905560408051637e062a3560e11b815290518493929092169163fc0c546a91600480820192602092909190829003018186803b15801561009957600080fd5b505afa1580156100ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d191906100f9565b600280546001600160a01b0319166001600160a01b0392909216919091179055506101279050565b60006020828403121561010a578081fd5b81516001600160a01b0381168114610120578182fd5b9392505050565b610a53806101366000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063ab033ea911610076578063d653943a1161005b578063d653943a1461011e578063efbb5cb014610126578063fbfa77cf1461012e576100a3565b8063ab033ea914610103578063d0e30db014610116576100a3565b80631f1fcd51146100a85780632e1a7d4d146100c65780635aa6e675146100e65780636817031b146100ee575b600080fd5b6100b0610136565b6040516100bd91906107ca565b60405180910390f35b6100d96100d436600461077e565b610145565b6040516100bd9190610989565b6100b06101a9565b6101016100fc3660046106b9565b6101b8565b005b6101016101113660046106b9565b610211565b61010161026a565b6100b0610296565b6100d961029c565b6100b0610322565b6002546001600160a01b031681565b6001546000906001600160a01b0316331461017b5760405162461bcd60e51b8152600401610172906108be565b60405180910390fd5b600061018683610331565b6002549093509091506101a3906001600160a01b0316338361048a565b50919050565b6000546001600160a01b031681565b6000546001600160a01b031633146101e25760405162461bcd60e51b81526004016101729061082a565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461023b5760405162461bcd60e51b81526004016101729061082a565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031633146102945760405162461bcd60e51b8152600401610172906108be565b565b610bad81565b6002546040516370a0823160e01b81526000916001600160a01b0316906370a08231906102cd9030906004016107ca565b60206040518083038186803b1580156102e557600080fd5b505afa1580156102f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031d9190610796565b905090565b6001546001600160a01b031681565b6001546040516339ebf82360e01b8152600091829182916001600160a01b0316906339ebf823906103669030906004016107ca565b6101206040518083038186803b15801561037f57600080fd5b505afa158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190610700565b60c001516002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906103f19030906004016107ca565b60206040518083038186803b15801561040957600080fd5b505afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190610796565b90508085111561045f5792508261045881866109ca565b9250610483565b8082111561047f5761047181836109ca565b92508483111561047f578492505b8493505b5050915091565b61050d8363a9059cbb60e01b84846040516024016104a99291906107de565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610512565b505050565b6000610567826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105a19092919063ffffffff16565b80519091501561050d578080602001905181019061058591906106e0565b61050d5760405162461bcd60e51b81526004016101729061092c565b60606105b084846000856105ba565b90505b9392505050565b6060824710156105dc5760405162461bcd60e51b815260040161017290610861565b6105e58561067a565b6106015760405162461bcd60e51b8152600401610172906108f5565b600080866001600160a01b0316858760405161061d91906107ae565b60006040518083038185875af1925050503d806000811461065a576040519150601f19603f3d011682016040523d82523d6000602084013e61065f565b606091505b509150915061066f828286610680565b979650505050505050565b3b151590565b6060831561068f5750816105b3565b82511561069f5782518084602001fd5b8160405162461bcd60e51b815260040161017291906107f7565b6000602082840312156106ca578081fd5b81356001600160a01b03811681146105b3578182fd5b6000602082840312156106f1578081fd5b815180151581146105b3578182fd5b6000610120808385031215610713578182fd5b61071c81610992565b9050825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b60006020828403121561078f578081fd5b5035919050565b6000602082840312156107a7578081fd5b5051919050565b600082516107c08184602087016109ed565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108168160408501602087016109ed565b601f01601f19169190910160400192915050565b6020808252600b908201527f21676f7665726e616e6365000000000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526006908201527f217661756c740000000000000000000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60405181810167ffffffffffffffff811182821017156109c257634e487b7160e01b600052604160045260246000fd5b604052919050565b6000828210156109e857634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015610a085781810151838201526020016109f0565b83811115610a17576000848401525b5050505056fea2646970667358221220a0b5d03694f8b8c0f72c81a6b01f6bf3ecaf7616783a653d02e1c4d9d93e1e2764736f6c63430008000033";
