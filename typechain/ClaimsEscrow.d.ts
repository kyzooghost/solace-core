/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ClaimsEscrowInterface extends ethers.utils.Interface {
  functions: {
    "c_0xf5aa4efd(bytes32)": FunctionFragment;
    "claims(uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "receiveClaim(address)": FunctionFragment;
    "registry()": FunctionFragment;
    "withdrawClaimsPayout(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "c_0xf5aa4efd",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveClaim",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawClaimsPayout",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "c_0xf5aa4efd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawClaimsPayout",
    data: BytesLike
  ): Result;

  events: {
    "ClaimWithdrawn(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimWithdrawn"): EventFragment;
}

export class ClaimsEscrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ClaimsEscrowInterface;

  functions: {
    c_0xf5aa4efd(
      c__0xf5aa4efd: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "c_0xf5aa4efd(bytes32)"(
      c__0xf5aa4efd: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    claims(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      claimant: string;
      amount: BigNumber;
      receivedAt: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "claims(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      claimant: string;
      amount: BigNumber;
      receivedAt: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    governance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    receiveClaim(
      _claimant: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "receiveClaim(address)"(
      _claimant: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    registry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "registry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawClaimsPayout(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawClaimsPayout(uint256)"(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  c_0xf5aa4efd(
    c__0xf5aa4efd: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "c_0xf5aa4efd(bytes32)"(
    c__0xf5aa4efd: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  claims(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    claimant: string;
    amount: BigNumber;
    receivedAt: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  "claims(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    claimant: string;
    amount: BigNumber;
    receivedAt: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  receiveClaim(
    _claimant: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "receiveClaim(address)"(
    _claimant: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  withdrawClaimsPayout(
    claimId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawClaimsPayout(uint256)"(
    claimId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    c_0xf5aa4efd(
      c__0xf5aa4efd: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "c_0xf5aa4efd(bytes32)"(
      c__0xf5aa4efd: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claims(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      claimant: string;
      amount: BigNumber;
      receivedAt: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "claims(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      claimant: string;
      amount: BigNumber;
      receivedAt: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    receiveClaim(
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "receiveClaim(address)"(
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    withdrawClaimsPayout(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawClaimsPayout(uint256)"(
      claimId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ClaimWithdrawn(
      claimId: BigNumberish | null,
      claimant: string | null,
      amount: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    c_0xf5aa4efd(
      c__0xf5aa4efd: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "c_0xf5aa4efd(bytes32)"(
      c__0xf5aa4efd: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claims(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "claims(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    receiveClaim(
      _claimant: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "receiveClaim(address)"(
      _claimant: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawClaimsPayout(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawClaimsPayout(uint256)"(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    c_0xf5aa4efd(
      c__0xf5aa4efd: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "c_0xf5aa4efd(bytes32)"(
      c__0xf5aa4efd: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claims(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claims(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveClaim(
      _claimant: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "receiveClaim(address)"(
      _claimant: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawClaimsPayout(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawClaimsPayout(uint256)"(
      claimId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
