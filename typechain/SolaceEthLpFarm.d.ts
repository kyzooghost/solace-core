/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SolaceEthLpFarmInterface extends ethers.utils.Interface {
  functions: {
    "accRewardPerShare()": FunctionFragment;
    "acceptGovernance()": FunctionFragment;
    "appraise(uint256)": FunctionFragment;
    "blockReward()": FunctionFragment;
    "countDeposited(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositSigned(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "endBlock()": FunctionFragment;
    "farmType()": FunctionFragment;
    "fee()": FunctionFragment;
    "getDeposited(address,uint256)": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "lastRewardBlock()": FunctionFragment;
    "lastTick()": FunctionFragment;
    "listDeposited(address)": FunctionFragment;
    "lpToken()": FunctionFragment;
    "master()": FunctionFragment;
    "mintAndDeposit(tuple)": FunctionFragment;
    "newGovernance()": FunctionFragment;
    "pendingRewards(address)": FunctionFragment;
    "pool()": FunctionFragment;
    "setEnd(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setRewards(uint256)": FunctionFragment;
    "solace()": FunctionFragment;
    "startBlock()": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "tokenInfo(uint256)": FunctionFragment;
    "updateFarm()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "valueStaked()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawRewards()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accRewardPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appraise",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countDeposited",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSigned",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "farmType", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDeposited",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastTick", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listDeposited",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintAndDeposit",
    values: [
      {
        depositor: string;
        amountSolace: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "solace", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFarm",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "valueStaked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accRewardPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appraise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastTick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "solace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valueStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;

  events: {
    "FarmEndSet(uint256)": EventFragment;
    "GovernanceTransferred(address)": EventFragment;
    "RewardsSet(uint256)": EventFragment;
    "TokenDeposited(address,uint256)": EventFragment;
    "TokenWithdrawn(address,uint256)": EventFragment;
    "UserRewarded(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FarmEndSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRewarded"): EventFragment;
}

export class SolaceEthLpFarm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SolaceEthLpFarmInterface;

  functions: {
    accRewardPerShare(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accRewardPerShare()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    acceptGovernance(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptGovernance()"(overrides?: Overrides): Promise<ContractTransaction>;

    appraise(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _value: BigNumber;
      0: BigNumber;
    }>;

    "appraise(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _value: BigNumber;
      0: BigNumber;
    }>;

    blockReward(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "blockReward()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    countDeposited(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countDeposited(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    deposit(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositSigned(
      _depositor: string,
      _token: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
      _depositor: string,
      _token: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    endBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "endBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    farmType(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "farmType()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    fee(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "fee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getDeposited(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getDeposited(address,uint256)"(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    governance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    lastRewardBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastRewardBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastTick(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "lastTick()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    listDeposited(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "listDeposited(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
      1: BigNumber[];
    }>;

    lpToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "lpToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    master(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "master()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    mintAndDeposit(
      params: {
        depositor: string;
        amountSolace: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mintAndDeposit(tuple)"(
      params: {
        depositor: string;
        amountSolace: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    newGovernance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "newGovernance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pendingRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setEnd(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEnd(uint256)"(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewards(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewards(uint256)"(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    solace(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "solace()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    startBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "startBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tickSpacing(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "tickSpacing()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    token0(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token0()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    token1(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token1()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositor: string;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      value: BigNumber;
      0: string;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
    }>;

    "tokenInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositor: string;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      value: BigNumber;
      0: string;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
    }>;

    updateFarm(overrides?: Overrides): Promise<ContractTransaction>;

    "updateFarm()"(overrides?: Overrides): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      value: BigNumber;
      rewardDebt: BigNumber;
      unpaidRewards: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      value: BigNumber;
      rewardDebt: BigNumber;
      unpaidRewards: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    valueStaked(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "valueStaked()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    weth(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "weth()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdraw(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawRewards(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawRewards()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  "accRewardPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  acceptGovernance(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptGovernance()"(overrides?: Overrides): Promise<ContractTransaction>;

  appraise(_token: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "appraise(uint256)"(
    _token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blockReward(overrides?: CallOverrides): Promise<BigNumber>;

  "blockReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  countDeposited(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "countDeposited(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _token: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _token: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositSigned(
    _depositor: string,
    _token: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
    _depositor: string,
    _token: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  farmType(overrides?: CallOverrides): Promise<BigNumber>;

  "farmType()"(overrides?: CallOverrides): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<number>;

  "fee()"(overrides?: CallOverrides): Promise<number>;

  getDeposited(
    _user: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "getDeposited(address,uint256)"(
    _user: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastTick(overrides?: CallOverrides): Promise<number>;

  "lastTick()"(overrides?: CallOverrides): Promise<number>;

  listDeposited(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber[];
    1: BigNumber[];
  }>;

  "listDeposited(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber[];
    1: BigNumber[];
  }>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  "lpToken()"(overrides?: CallOverrides): Promise<string>;

  master(overrides?: CallOverrides): Promise<string>;

  "master()"(overrides?: CallOverrides): Promise<string>;

  mintAndDeposit(
    params: {
      depositor: string;
      amountSolace: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mintAndDeposit(tuple)"(
    params: {
      depositor: string;
      amountSolace: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  newGovernance(overrides?: CallOverrides): Promise<string>;

  "newGovernance()"(overrides?: CallOverrides): Promise<string>;

  pendingRewards(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pendingRewards(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  setEnd(
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEnd(uint256)"(
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewards(
    _blockReward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewards(uint256)"(
    _blockReward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  solace(overrides?: CallOverrides): Promise<string>;

  "solace()"(overrides?: CallOverrides): Promise<string>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  "tickSpacing()"(overrides?: CallOverrides): Promise<number>;

  token0(overrides?: CallOverrides): Promise<string>;

  "token0()"(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  "token1()"(overrides?: CallOverrides): Promise<string>;

  tokenInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    depositor: string;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    value: BigNumber;
    0: string;
    1: number;
    2: number;
    3: BigNumber;
    4: BigNumber;
  }>;

  "tokenInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    depositor: string;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    value: BigNumber;
    0: string;
    1: number;
    2: number;
    3: BigNumber;
    4: BigNumber;
  }>;

  updateFarm(overrides?: Overrides): Promise<ContractTransaction>;

  "updateFarm()"(overrides?: Overrides): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    value: BigNumber;
    rewardDebt: BigNumber;
    unpaidRewards: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "userInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    value: BigNumber;
    rewardDebt: BigNumber;
    unpaidRewards: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  valueStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "valueStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _token: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _token: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawRewards(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accRewardPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    "acceptGovernance()"(overrides?: CallOverrides): Promise<void>;

    appraise(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "appraise(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockReward(overrides?: CallOverrides): Promise<BigNumber>;

    "blockReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    countDeposited(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countDeposited(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(_token: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositSigned(
      _depositor: string,
      _token: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
      _depositor: string,
      _token: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmType(overrides?: CallOverrides): Promise<BigNumber>;

    "farmType()"(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<number>;

    "fee()"(overrides?: CallOverrides): Promise<number>;

    getDeposited(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getDeposited(address,uint256)"(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastTick(overrides?: CallOverrides): Promise<number>;

    "lastTick()"(overrides?: CallOverrides): Promise<number>;

    listDeposited(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
      1: BigNumber[];
    }>;

    "listDeposited(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
      1: BigNumber[];
    }>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    "lpToken()"(overrides?: CallOverrides): Promise<string>;

    master(overrides?: CallOverrides): Promise<string>;

    "master()"(overrides?: CallOverrides): Promise<string>;

    mintAndDeposit(
      params: {
        depositor: string;
        amountSolace: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintAndDeposit(tuple)"(
      params: {
        depositor: string;
        amountSolace: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newGovernance(overrides?: CallOverrides): Promise<string>;

    "newGovernance()"(overrides?: CallOverrides): Promise<string>;

    pendingRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    setEnd(_endBlock: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setEnd(uint256)"(
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(
      _blockReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewards(uint256)"(
      _blockReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    solace(overrides?: CallOverrides): Promise<string>;

    "solace()"(overrides?: CallOverrides): Promise<string>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    "tickSpacing()"(overrides?: CallOverrides): Promise<number>;

    token0(overrides?: CallOverrides): Promise<string>;

    "token0()"(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    "token1()"(overrides?: CallOverrides): Promise<string>;

    tokenInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositor: string;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      value: BigNumber;
      0: string;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
    }>;

    "tokenInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositor: string;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      value: BigNumber;
      0: string;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
    }>;

    updateFarm(overrides?: CallOverrides): Promise<void>;

    "updateFarm()"(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      value: BigNumber;
      rewardDebt: BigNumber;
      unpaidRewards: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      value: BigNumber;
      rewardDebt: BigNumber;
      unpaidRewards: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    valueStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "valueStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    withdraw(_token: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRewards(overrides?: CallOverrides): Promise<void>;

    "withdrawRewards()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    FarmEndSet(_endBlock: null): EventFilter;

    GovernanceTransferred(_newGovernance: null): EventFilter;

    RewardsSet(_blockReward: null): EventFilter;

    TokenDeposited(_user: string | null, _token: null): EventFilter;

    TokenWithdrawn(_user: string | null, _token: null): EventFilter;

    UserRewarded(_user: string | null, _amount: null): EventFilter;
  };

  estimateGas: {
    accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accRewardPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(overrides?: Overrides): Promise<BigNumber>;

    "acceptGovernance()"(overrides?: Overrides): Promise<BigNumber>;

    appraise(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "appraise(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockReward(overrides?: CallOverrides): Promise<BigNumber>;

    "blockReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    countDeposited(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countDeposited(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(_token: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositSigned(
      _depositor: string,
      _token: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
      _depositor: string,
      _token: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmType(overrides?: CallOverrides): Promise<BigNumber>;

    "farmType()"(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDeposited(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeposited(address,uint256)"(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastTick(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTick()"(overrides?: CallOverrides): Promise<BigNumber>;

    listDeposited(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "listDeposited(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    "master()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndDeposit(
      params: {
        depositor: string;
        amountSolace: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mintAndDeposit(tuple)"(
      params: {
        depositor: string;
        amountSolace: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    newGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    "newGovernance()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    setEnd(_endBlock: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setEnd(uint256)"(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewards(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewards(uint256)"(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    solace(overrides?: CallOverrides): Promise<BigNumber>;

    "solace()"(overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    "tickSpacing()"(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    "token0()"(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    "token1()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFarm(overrides?: Overrides): Promise<BigNumber>;

    "updateFarm()"(overrides?: Overrides): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "valueStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_token: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawRewards(overrides?: Overrides): Promise<BigNumber>;

    "withdrawRewards()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accRewardPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accRewardPerShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptGovernance(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptGovernance()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    appraise(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "appraise(uint256)"(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blockReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countDeposited(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countDeposited(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositSigned(
      _depositor: string,
      _token: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositSigned(address,uint256,uint256,uint8,bytes32,bytes32)"(
      _depositor: string,
      _token: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "farmType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeposited(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeposited(address,uint256)"(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastRewardBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTick(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastTick()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listDeposited(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listDeposited(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "master()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAndDeposit(
      params: {
        depositor: string;
        amountSolace: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mintAndDeposit(tuple)"(
      params: {
        depositor: string;
        amountSolace: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    newGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newGovernance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEnd(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEnd(uint256)"(
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewards(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewards(uint256)"(
      _blockReward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    solace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solace()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tickSpacing()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token0()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateFarm(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateFarm()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "valueStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _token: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawRewards(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawRewards()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
