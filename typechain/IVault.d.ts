/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IVaultInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf()": FunctionFragment;
    "debtOutstanding(address)": FunctionFragment;
    "report(uint256,uint256,uint256)": FunctionFragment;
    "revokeStrategy(address)": FunctionFragment;
    "strategies(address)": FunctionFragment;
    "token()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtOutstanding",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "report",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "strategies", values: [string]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtOutstanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IVaultInterface;

  functions: {
    balanceOf(overrides?: Overrides): Promise<ContractTransaction>;

    "balanceOf()"(overrides?: Overrides): Promise<ContractTransaction>;

    debtOutstanding(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "debtOutstanding(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "report(uint256,uint256,uint256)"(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeStrategy(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeStrategy(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    strategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        performanceFee: BigNumber;
        activation: BigNumber;
        debtRatio: BigNumber;
        minDebtPerHarvest: BigNumber;
        maxDebtPerHarvest: BigNumber;
        lastReport: BigNumber;
        totalDebt: BigNumber;
        totalGain: BigNumber;
        totalLoss: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      };
    }>;

    "strategies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        performanceFee: BigNumber;
        activation: BigNumber;
        debtRatio: BigNumber;
        minDebtPerHarvest: BigNumber;
        maxDebtPerHarvest: BigNumber;
        lastReport: BigNumber;
        totalDebt: BigNumber;
        totalGain: BigNumber;
        totalLoss: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      };
    }>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(overrides?: Overrides): Promise<ContractTransaction>;

  "balanceOf()"(overrides?: Overrides): Promise<ContractTransaction>;

  debtOutstanding(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "debtOutstanding(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  report(
    gain: BigNumberish,
    loss: BigNumberish,
    _debtPayment: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "report(uint256,uint256,uint256)"(
    gain: BigNumberish,
    loss: BigNumberish,
    _debtPayment: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeStrategy(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeStrategy(address)"(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  strategies(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    performanceFee: BigNumber;
    activation: BigNumber;
    debtRatio: BigNumber;
    minDebtPerHarvest: BigNumber;
    maxDebtPerHarvest: BigNumber;
    lastReport: BigNumber;
    totalDebt: BigNumber;
    totalGain: BigNumber;
    totalLoss: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
  }>;

  "strategies(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    performanceFee: BigNumber;
    activation: BigNumber;
    debtRatio: BigNumber;
    minDebtPerHarvest: BigNumber;
    maxDebtPerHarvest: BigNumber;
    lastReport: BigNumber;
    totalDebt: BigNumber;
    totalGain: BigNumber;
    totalLoss: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
  }>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtOutstanding(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtOutstanding(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "report(uint256,uint256,uint256)"(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeStrategy(arg0: string, overrides?: CallOverrides): Promise<void>;

    "revokeStrategy(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      performanceFee: BigNumber;
      activation: BigNumber;
      debtRatio: BigNumber;
      minDebtPerHarvest: BigNumber;
      maxDebtPerHarvest: BigNumber;
      lastReport: BigNumber;
      totalDebt: BigNumber;
      totalGain: BigNumber;
      totalLoss: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }>;

    "strategies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      performanceFee: BigNumber;
      activation: BigNumber;
      debtRatio: BigNumber;
      minDebtPerHarvest: BigNumber;
      maxDebtPerHarvest: BigNumber;
      lastReport: BigNumber;
      totalDebt: BigNumber;
      totalGain: BigNumber;
      totalLoss: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceOf(overrides?: Overrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: Overrides): Promise<BigNumber>;

    debtOutstanding(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtOutstanding(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "report(uint256,uint256,uint256)"(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeStrategy(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeStrategy(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "strategies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(overrides?: Overrides): Promise<PopulatedTransaction>;

    "balanceOf()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    debtOutstanding(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtOutstanding(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "report(uint256,uint256,uint256)"(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeStrategy(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeStrategy(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    strategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "strategies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
