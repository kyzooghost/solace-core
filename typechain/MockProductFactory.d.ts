/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockProductFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createProduct()": FunctionFragment;
    "deleteProduct(address)": FunctionFragment;
    "registry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createProduct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProduct",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;

  events: {
    "ProductCreated(address)": EventFragment;
    "ProductDeleted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProductCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductDeleted"): EventFragment;
}

export class MockProductFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockProductFactoryInterface;

  functions: {
    createProduct(overrides?: Overrides): Promise<ContractTransaction>;

    "createProduct()"(overrides?: Overrides): Promise<ContractTransaction>;

    deleteProduct(
      _product: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteProduct(address)"(
      _product: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "registry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  createProduct(overrides?: Overrides): Promise<ContractTransaction>;

  "createProduct()"(overrides?: Overrides): Promise<ContractTransaction>;

  deleteProduct(
    _product: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteProduct(address)"(
    _product: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createProduct(overrides?: CallOverrides): Promise<string>;

    "createProduct()"(overrides?: CallOverrides): Promise<string>;

    deleteProduct(_product: string, overrides?: CallOverrides): Promise<void>;

    "deleteProduct(address)"(
      _product: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ProductCreated(product: null): EventFilter;

    ProductDeleted(product: null): EventFilter;
  };

  estimateGas: {
    createProduct(overrides?: Overrides): Promise<BigNumber>;

    "createProduct()"(overrides?: Overrides): Promise<BigNumber>;

    deleteProduct(_product: string, overrides?: Overrides): Promise<BigNumber>;

    "deleteProduct(address)"(
      _product: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createProduct(overrides?: Overrides): Promise<PopulatedTransaction>;

    "createProduct()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deleteProduct(
      _product: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteProduct(address)"(
      _product: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
