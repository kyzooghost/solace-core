/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ClaimsAdjustor } from "./ClaimsAdjustor";

export class ClaimsAdjustorFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_registry: string, overrides?: Overrides): Promise<ClaimsAdjustor> {
    return super.deploy(_registry, overrides || {}) as Promise<ClaimsAdjustor>;
  }
  getDeployTransaction(
    _registry: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  attach(address: string): ClaimsAdjustor {
    return super.attach(address) as ClaimsAdjustor;
  }
  connect(signer: Signer): ClaimsAdjustorFactory {
    return super.connect(signer) as ClaimsAdjustorFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimsAdjustor {
    return new Contract(address, _abi, signerOrProvider) as ClaimsAdjustor;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimant",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ClaimApproved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_newGovernance",
        type: "address",
      },
    ],
    name: "GovernanceTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_claimant",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approveClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "newGovernance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract IRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
    ],
    name: "setGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104fb3803806104fb83398101604081905261002f91610062565b60008054336001600160a01b031991821617909155600280549091166001600160a01b0392909216919091179055610090565b600060208284031215610073578081fd5b81516001600160a01b0381168114610089578182fd5b9392505050565b61045c8061009f6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638b85cc7e116100505780638b85cc7e146100a7578063ab033ea9146100af578063f2ad7908146100c257610072565b8063238efcbc146100775780635aa6e675146100815780637b1039991461009f575b600080fd5b61007f6100d5565b005b610089610174565b60405161009691906103aa565b60405180910390f35b610089610183565b610089610192565b61007f6100bd366004610340565b6101a1565b61007f6100d036600461037f565b6101fa565b6001546001600160a01b031633146101085760405162461bcd60e51b81526004016100ff906103d7565b60405180910390fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038416179091551690556040517ff2c4a3b084b019a98d9c1a566a17ac81667550bfc69a028299f70b4e9e4bba569061016a9033906103aa565b60405180910390a1565b6000546001600160a01b031681565b6002546001600160a01b031681565b6001546001600160a01b031681565b6000546001600160a01b031633146101cb5760405162461bcd60e51b81526004016100ff906103d7565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102245760405162461bcd60e51b81526004016100ff906103d7565b6002546040805163fbfa77cf60e01b815290516000926001600160a01b03169163fbfa77cf91600480830192602092919082900301818787803b15801561026a57600080fd5b505af115801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a29190610363565b604051631bff085760e21b81529091506001600160a01b03821690636ffc215c906102d390869086906004016103be565b600060405180830381600087803b1580156102ed57600080fd5b505af1158015610301573d6000803e3d6000fd5b50506040518492506001600160a01b03861691507f308187387164507a01d4463583bc3e8760529edc45d573acc02ed018bd4ac27690600090a3505050565b600060208284031215610351578081fd5b813561035c8161040e565b9392505050565b600060208284031215610374578081fd5b815161035c8161040e565b60008060408385031215610391578081fd5b823561039c8161040e565b946020939093013593505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252600b908201527f21676f7665726e616e6365000000000000000000000000000000000000000000604082015260600190565b6001600160a01b038116811461042357600080fd5b5056fea264697066735822122073bd8b3d44bb757cc9564c5bea757fd98d322f1ae008cfd0387cc67c258817b364736f6c63430008000033";
