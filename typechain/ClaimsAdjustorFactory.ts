/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ClaimsAdjustor } from "./ClaimsAdjustor";

export class ClaimsAdjustorFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_registry: string, overrides?: Overrides): Promise<ClaimsAdjustor> {
    return super.deploy(_registry, overrides || {}) as Promise<ClaimsAdjustor>;
  }
  getDeployTransaction(
    _registry: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  attach(address: string): ClaimsAdjustor {
    return super.attach(address) as ClaimsAdjustor;
  }
  connect(signer: Signer): ClaimsAdjustorFactory {
    return super.connect(signer) as ClaimsAdjustorFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimsAdjustor {
    return new Contract(address, _abi, signerOrProvider) as ClaimsAdjustor;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimant",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ClaimApproved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_claimant",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approveClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x850d8632",
        type: "bytes32",
      },
    ],
    name: "c_0x850d8632",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract IRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109f03803806109f0833981810160405281019061003291906101cb565b6100647f993cf40fb6762ef88a9443843c68db6e398241d01007b51b51a14b391de24f3760001b6101b360201b60201c565b6100967f81788c8a0acbc48e00fbf3ce1750c3559f043b6974f56b313799d127f7c7059760001b6101b360201b60201c565b6100c87f3e766e2207955fb22e92564536dcf2937475d39ea5ee4542c046a49290b49fc560001b6101b360201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061013a7fc67a0ec2b35fb2322ee4997671d5948c12ff4886617d767bc27505c267d57ea160001b6101b360201b60201c565b61016c7fb91e13e1d795403cc94f847a62656e8aac479a6e4a60777cf32ae643e1e5a1d160001b6101b360201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061023d565b50565b6000815190506101c581610226565b92915050565b6000602082840312156101dd57600080fd5b60006101eb848285016101b6565b91505092915050565b60006101ff82610206565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61022f816101f4565b811461023a57600080fd5b50565b6107a48061024c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635aa6e675146100515780637b1039991461006f578063ae724b121461008d578063f2ad7908146100a9575b600080fd5b6100596100c5565b604051610066919061062f565b60405180910390f35b6100776100e9565b6040516100849190610673565b60405180910390f35b6100a760048036038101906100a29190610599565b61010f565b005b6100c360048036038101906100be919061055d565b610112565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b61013e7fd8ae0e20fb98394f53d0d3ef956a793196997e5119bfef7feb2b101afceb71a760001b61010f565b61016a7f0a5b5e139e332f59ad5234bc6cf2118748e4fa5bde530f66acf0b046554316ad60001b61010f565b6101967fd1f3f2a4d032244464d2a1b3c382c18362e7f1c7e81c50603a8cf81fd1a11f8560001b61010f565b6101c27fed998b1f1350e49cea33fba56377d44a7574bf60a2fa413d7e70f72e1e6efb4860001b61010f565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610250576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102479061068e565b60405180910390fd5b61027c7f1d945b12dd46ed79ec9347eb876f47d8b6edaaff3593cbbb0fc6eede83e0cae260001b61010f565b6102a87f104618c05fb1ef282783b0040f12fabc01f8015c1457b7735cdf27e12ff1792f60001b61010f565b6102d47f94d110c50f279adf4569433581eeeef647d87bcef0980f6e2ce181f564cacd6760001b61010f565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561034057600080fd5b505af1158015610354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103789190610534565b90506103a67f2ebcda835220172b08d2c2be87f7abc1b127059b17c37d277b26e1522cc61a2560001b61010f565b6103d27f325928d35dd3c358ec22df224a3edf9353918ddb0af10395fa60c0b48008aef160001b61010f565b8073ffffffffffffffffffffffffffffffffffffffff16636ffc215c84846040518363ffffffff1660e01b815260040161040d92919061064a565b600060405180830381600087803b15801561042757600080fd5b505af115801561043b573d6000803e3d6000fd5b5050505061046b7f7044063a73ac70ce8a625d162048592b4fc14e86ab31566300f410ed42b7186b60001b61010f565b6104977f65e85e44e417331d040173659935974456d9e0094fe6841e3a07c0420b04a2d560001b61010f565b818373ffffffffffffffffffffffffffffffffffffffff167f308187387164507a01d4463583bc3e8760529edc45d573acc02ed018bd4ac27660405160405180910390a3505050565b6000813590506104ef81610729565b92915050565b60008151905061050481610729565b92915050565b60008135905061051981610740565b92915050565b60008135905061052e81610757565b92915050565b60006020828403121561054657600080fd5b6000610554848285016104f5565b91505092915050565b6000806040838503121561057057600080fd5b600061057e858286016104e0565b925050602061058f8582860161051f565b9150509250929050565b6000602082840312156105ab57600080fd5b60006105b98482850161050a565b91505092915050565b6105cb816106bf565b82525050565b6105da81610705565b82525050565b60006105ed600b836106ae565b91507f21676f7665726e616e63650000000000000000000000000000000000000000006000830152602082019050919050565b610629816106fb565b82525050565b600060208201905061064460008301846105c2565b92915050565b600060408201905061065f60008301856105c2565b61066c6020830184610620565b9392505050565b600060208201905061068860008301846105d1565b92915050565b600060208201905081810360008301526106a7816105e0565b9050919050565b600082825260208201905092915050565b60006106ca826106db565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061071082610717565b9050919050565b6000610722826106db565b9050919050565b610732816106bf565b811461073d57600080fd5b50565b610749816106d1565b811461075457600080fd5b50565b610760816106fb565b811461076b57600080fd5b5056fea2646970667358221220c1d94c7d34803488c338f3f792b3d5af384bb4a06af293981d9527cbac6bfd7064736f6c63430008000033";
