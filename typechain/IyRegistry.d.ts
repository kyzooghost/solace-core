/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IyRegistryInterface extends ethers.utils.Interface {
  functions: {
    "getVaultInfo(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getVaultInfo",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getVaultInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export class IyRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IyRegistryInterface;

  functions: {
    getVaultInfo(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<{
      controller: string;
      token: string;
      strategy: string;
      isWrapped: boolean;
      isDelegated: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
    }>;

    "getVaultInfo(address)"(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<{
      controller: string;
      token: string;
      strategy: string;
      isWrapped: boolean;
      isDelegated: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
    }>;
  };

  getVaultInfo(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<{
    controller: string;
    token: string;
    strategy: string;
    isWrapped: boolean;
    isDelegated: boolean;
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: boolean;
  }>;

  "getVaultInfo(address)"(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<{
    controller: string;
    token: string;
    strategy: string;
    isWrapped: boolean;
    isDelegated: boolean;
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: boolean;
  }>;

  callStatic: {
    getVaultInfo(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<{
      controller: string;
      token: string;
      strategy: string;
      isWrapped: boolean;
      isDelegated: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
    }>;

    "getVaultInfo(address)"(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<{
      controller: string;
      token: string;
      strategy: string;
      isWrapped: boolean;
      isDelegated: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
    }>;
  };

  filters: {};

  estimateGas: {
    getVaultInfo(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultInfo(address)"(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getVaultInfo(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultInfo(address)"(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
